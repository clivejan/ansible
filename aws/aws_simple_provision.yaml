- hosts: localhost
  tasks:
    - name: Ensure key pair is present
      ec2_key:      
        name: default
        key_material: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    - name: Ensure VPC network is present
      ec2_vpc_net:
        name: ansible_vpc
        state: present
        cidr_block: 172.16.0.0/16
        region: us-east-2
      register: ansible_vpc
    - name: Ensure the VPC subnetwork public 2a is present
      ec2_vpc_subnet:
        state: present
        az: us-east-2a
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        cidr: 172.16.11.0/24
        tags:
          Name: ansible_subnet_public_2a
      register: ansible_subnet_public_2a
    - name: Ensure the VPC subnetwork public 2b is present
      ec2_vpc_subnet:
        state: present
        az: us-east-2b
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        cidr: 172.16.12.0/24
        tags:
          Name: ansible_subnet_public_2b
      register: ansible_subnet_public_2b
    - name: Ensure the VPC subnetwork private 2a is present
      ec2_vpc_subnet:
        state: present
        az: us-east-2a
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        cidr: 172.16.21.0/24
        tags:
          Name: ansible_subnet_private_2a
      register: ansible_subnet_private_2a
    - name: Ensure the VPC subnetwork private 2b is present
      ec2_vpc_subnet:
        state: present
        az: us-east-2b
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        cidr: 172.16.22.0/24
        tags:
          Name: ansible_subnet_private_2b
      register: ansible_subnet_private_2b
    - name: Ensure SSH Security Groups is present
      ec2_group:
        name: ansible_ssh
        description: ansible_ssh
        region: us-east-2
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 206.180.252.20/32
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: ansible_ssh
    - name: Ensure HTTP Security Group is present
      ec2_group:
        name: ansible_web
        description: ansible_web
        region: us-east-2
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 206.180.252.20/32
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: ansible_web
    - name: Ensure MySQL Security Group is present
      ec2_group:
        name: ansible_db
        description: ansible_db
        region: us-east-2
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 3306
            to_port: 3306
            group_id: "{{ ansible_web.group_id }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: ansible_db
    - name: Ensure that the VPC has an Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        state: present
      register: ansible_igw
    - name: Ensure publuc subnet has a route to IGW
      ec2_vpc_route_table:
        vpc_id: "{{ ansible_vpc.vpc.id }}"
        region: us-east-2
        tags:
          Name: ansible_route_public
        subnets:
          - "{{ ansible_subnet_public_2a.subnet.id }}"
          - "{{ ansible_subnet_public_2b.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ ansible_igw.gateway_id }}"
      register: ansible_route_public
    - name: Setup Web instance
      ec2:
        assign_public_ip: "{{ item.public_ip }}"
        image: ami-0ecb27a764b5327e9
        region: us-east-2
        exact_count: 1
        key_name: default
        count_tag:
          Name: "{{ item.name }}"
        instance_tags:
          Name: "{{ item.name }}"
        instance_type: t2.micro
        group_id: "{{ item.group_id }}"
        vpc_subnet_id: "{{ item.subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 8
            delete_on_termination: True
      register: ansible_web_instance
      with_items:
          - name: web01
            subnet_id: "{{ ansible_subnet_public_2a.subnet.id }}"
            group_id:
              - "{{ ansible_ssh.group_id }}"
              - "{{ ansible_web.group_id }}"
            public_ip: True
          - name: web02
            subnet_id: "{{ ansible_subnet_public_2b.subnet.id }}"
            group_id:
              - "{{ ansible_ssh.group_id }}"
              - "{{ ansible_web.group_id }}"
            public_ip: True
          - name: db
            subnet_id: "{{ ansible_subnet_private_2a.subnet.id }}"
            group_id: "{{ ansible_db.group_id }}"
            public_ip: False
